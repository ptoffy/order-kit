# Usage: 
# - docker-compose up: Start the services
# - docker-compose down: Stop the services

# Set the version of docker-compose
version: '3.8'

services:
  # Setup the backend Node.js API
  api:
    container_name: order-kit-api
    # Build the Dockerfile in the api directory
    build: api
    # Set the environment variables
    environment:
      - MONGODB_URI=mongodb://root:password@db:27017/order-kit
      - JWT_PUBLIC_KEY=mySuperKey
      - JWT_PRIVATE_KEY=mySuperSecretKey
      - PORT=3000
    ports:
      - '3000:3000'
    # Create a connection to the MongoDB service with the name of the service as the host name
    # links:
    #   - db 
    # Start the MongoDB service before the API service
    depends_on:
      - db
    volumes:
      - api-data:/app
      - node-modules-api:/app/node_modules
    networks:
      - order-kit-network
  # Setup the frontend Angular.js UI
  ui:
    container_name: order-kit-ui
    # Build the Dockerfile in the ui directory
    build: ui
    # links:
    #   - api
    ports:
      - '4200:4200'
    depends_on:
      - api
    volumes:
      - ui-data:/app
      - node-modules-ui:/app/node_modules
    networks:
      - order-kit-network
  # Setup the MongoDB service
  db:
    image: mongo
    container_name: order-kit-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=order-kit
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - '27017:27017'
    networks:
      - order-kit-network

volumes:
  mongo-data:
    driver: local
  api-data:
    driver: local
  ui-data:
    driver: local
  node-modules-api:
    driver: local
  node-modules-ui:
    driver: local
  
networks:
  order-kit-network:
    driver: bridge

